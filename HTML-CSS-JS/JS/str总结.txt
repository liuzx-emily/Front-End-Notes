trim
repeat
模版字符串：
	嵌入变量：${变量名}
	

-----------------------
	*包装对象*
基本类型都有自己对应的包装对象:String Number Boolean
(值类型的另外两种:null undefined没有包装对象)
	var str1 = 'hello';
	var str2 = new String('hello');	//不推荐这么写
	alert(typeof str1);	//string
	alert(typeof str2);	//object
基本类型不是对象，那么为什么和对象一样有属性和方法呢？
	var str='Phil';
	str.length		//4
	str.charAt(0)	//P
基本类型(string boolean number)调用属性、方法时：基本类型会找到对应的包装对象类型(String Boolean Number)，然后包装对象把所有的属性和方法给了基本类型，然后包装对象消失
	String.prototype.liuzx=function(){
		alert('所有string类型和String对象都可以调用这个');
	}
	var s1 = 'phil';
	s1.liuzx();		//弹'所有...'
	var s2 = new String('aaa');
	s2.liuzx();		//弹'所有...'
题目：
	var str='Dunphy';
	str.abc=123;
	alert(str.abc);	//undefined
	原因:
		第1行：str是基本类型string。
		第2行：新建属性abc：新建了一个包装对象S1，给S1赋属性S1.abc=123。然后包装对象S1消失。
		第3行：又新建了一个包装对象S2,S2下没有属性abc，是undefined。

-----------------------
	*判断类型*
var str='Phil';
console.log(typeof str);	 	//string
console.log(str.constructor); 	//function String(){}
console.log(str instanceof String); //false


-----------------------
	*字符串内断行*
这样断行可以：
	var x =
	"Hello World!";
但是在字符串内断行不可以，会报错：
	var x = "Hello
	World!";
如果想要在字符串内部断行,需要使用反斜杠(\)
	var x = "Hello \
	World!";

-----------------------
	题：把str颠倒
数组有颠倒函数reverse,so考虑把str转为array
	var str = 'abcdef';
	var newStr = str.split('').reverse().join('');
	console.log(str);		//abcdef
	console.log(newStr);	//fedcba

--------------
	题：找出str中的所有数字
1 正则
	function findNum(str){
		return str.match(/\d+/g);
	}

2 传统字符串操作
  思路:1 字符串可以比较大小，比较的是编码
  		  str.charAt(i)<='9' && str.charAt(i)>='0'就是0-9的数字
  		2 想要位数多的数字，设一个tmp来存
  		3 最后如果是数字，则不走else，需要额外把tmp加进去
	var str = 'haj123sdk54hask33dkhalsd879';
	function findNum(str){		
		var arr = [];		
		var tmp = '';		
		for(var i=0;i<str.length;i++){
			if( str.charAt(i)<='9' && str.charAt(i)>='0' ){
				tmp += str.charAt(i);
			}
			else{
				if(tmp){
					arr.push(tmp);
					tmp = '';
				}
			}
		}		
		if(tmp){
			arr.push(tmp);
			tmp = '';
		}		
		return arr;	
	}
	alert( findNum(str) );   //[123,54,33,879]

----------------------
	题：判断str里有没有子串
1 正则
	/blue/.test('Blue Whale')

2 传统字符串操作
	'Blue Whale'.indexOf('Blue') !== -1
  下面是错的:
	'Blue Whale'.indexOf('Blue')
	因为没有的时候,返回-1,而-1是true

----------------------
	题：str中连着查找
效果要求：
	find('小蜗牛小狗小猫大鸭梨', '小'); 
	输出[ 0, 3, 5 ]

1 正则
	function find(str, re) {
	   re = new RegExp(re, 'g');
	   var arr = [];
	   str.replace(re, function(match, offset, string) {
	      arr.push(offset);
	   });
	   console.log(arr);
	}

2 传统字符串操作
	function find2(str, target) {
	   var i = 0;
	   var arr = [];
	   while (str.indexOf(target, i) !== -1) {
	      arr.push(i);
	      i = str.indexOf(target, i) + target.length;
	      i = str.indexOf(target, i) + 1;
	   }
	   console.log(arr);
	}

----------------------
	题：简单加密

function jiaMi(text) {
   var newText = '';
   for (let i = 0; i < text.length; i++) {
      newText += String.fromCharCode(text.charCodeAt(i) * 2);

   }
   return newText;
}

var t1 = '小狗%^';
var t2 = jiaMi(t1);
console.log(jiaMi(t1));

function jieMi(text) {
   var originalText = '';
   for (let i = 0; i < text.length; i++) {
      originalText += String.fromCharCode(text.charCodeAt(i) / 2);

   }
   return originalText;
}
	console.log(jieMi(t2));

----------------------
	题：替换
1  str.replace(re,func);
2  str.split(re).join(newS);

----------------------
	题：文字变色
oBtn.onclick = function() {
	var sText = oText.value;
	var aText = sText.split('');//分隔符可以自己根据需要设定
	for (let i = 0; i < aText.length; i++) {
		var oNewSpan = document.createElement('span');
		oNewSpan.innerText = aText[i];
		oNewSpan.style.backgroundColor = aColor[i % aColor.length];
		oDiv.appendChild(oNewSpan);
   	}
};
备注：这里用的是createElement的方式，也可以用innerhtml方式添加


----------------------
	题：段落展开/收缩
可以用substring等切割str的函数
例子:
	oA.onOff = true;
    oA.onclick = function() {
       if (oA.onOff) {
          oSpan.innerHTML = str.substring(0,18)+'...';
          oA.innerHTML = '展开';
       } else {
          oSpan.innerHTML = str;
          oA.innerHTML = '收缩';
       }
       oA.onOff = !oA.onOff;
    }; 


题目结束，下面都是string的方法介绍：


-------------------------
1 str.charAt(index)
	'Brave new world'.charAt(2);	// 'a'
  和str[index]的唯一区别：
  	IE6中str[1]不认，只认str.charAt(1)。但是现在已经不需要兼容IE6了，放心用[]就可以了

-------------------------
2 str.charCodeAt(index)
	index范围:	0~len-1，返回0~65535之间的一个整数，代表UTF-16 code unit
	'ABC'.charCodeAt(0); 	// 65
常见编码:
	0~9  	48~57			
	a~z		97~122			
	A~Z   	65~90

-------------------------
3 String.fromCharCode(num1, ..., numN)
	String.fromCharCode(65, 66, 67);	// "ABC"
	
-------------------------
4	str.indexOf(searchValue[, fromIndex])
	返回-1说明没找到。
例子：
	var str='Blue Whale';
	str.indexOf('Blue');     	// returns  0
	str.indexOf('Blute');    	// returns -1
	str.indexOf('Whale', 0); 	// returns  5
	str.indexOf('Whale', 5); 	// returns  5
	str.indexOf('B', 100);   	// returns -1

str.search()支持正则查找
	var str='abc?def';	
	str.indexOf('?')	//把?当作字符，查找?。结果：3
	str.search('?')		//把?当作正则表达式，会报错，因为?不是合法的正则表达式.结果：报错
所以，查找字符时用indexOf；用正则式用search


-------------------------
5	str.lastIndexOf(searchValue[, fromIndex])
	fromIndex:从哪里开始向左找
	返回-1说明没找到。
例子；
	var str='canal';
	str.lastIndexOf('a');     	// returns 3
	str.lastIndexOf('a', 2);  	// returns 1
	str.lastIndexOf('a', 0);  	// returns -1
	str.lastIndexOf('x');     	// returns -1
	str.lastIndexOf('c', -5); 	// returns 0
	str.lastIndexOf('c', 0);  	// returns 0
	
-------------------------
6	str.substring(indexStart[, indexEnd])
	会将两个参数比较大小，小的放前面
例子1：
	var str = 'Mozilla';	
	str.substring(0, 3)		//'Moz'
	str.substring(3, 0)		//'Moz'
	str.substring(4, 7)		//'lla'
	str.substring(4)		//'lla'
	str.substring(7, 4)		//'lla'
	str.substring(0, 6)		//'Mozill'	
	str.substring(0, 7) 	//'Mozilla'
	str.substring(0, 10) 	//'Mozilla'
	
-------------------------
7	str.substr(start , length)
例子：
	var str = 'abcdefghij';
	str.substr(1, 2)   	// 'bc'
	str.substr(-3, 2) 	// 'hi'
	str.substr(-3)		// 'hij'
	str.substr(1) 		// 'bcdefghij'
	str.substr(-20, 2) 	// 'ab'
	str.substr(20, 2) 	// ''

-------------------------
8	str.slice(beginIndex[, endIndex])
   	返回一个新string，不影响原来的string

例子1：
	str1 = 'The morning is upon us.'	//长度23
    str1.slice(1, 8)  	//he morn
    str1.slice(4, -2) 	//morning is upon u
    str1.slice(12)		//is upon us.
    str1.slice(30)		//""

例子2：
	str = 'The morning is upon us.';
	str.slice(-3);     	//'us.'
	str.slice(-3, -1); 	//'us'
	str.slice(0, -1);  	//'The morning is upon us'

-------------------------
9 str.split([separator[, limit]])
	separator可以是正则

	var str = 'www.miaov.com';
	str.split('.');	// ['www','miaov','com']

	var str1 = 'leo';
	str1.split() ;		// ['leo']
	str1.split('');		//['l','e','o']


	var str3 = '/www.miaov.com/';
	str3.split('/');	// [ , www.miaov.com,  ]

	var str4 = '2013-11-29-23-07'; 
	str4.split('-', 3);	// [ '2013', '11', '29' ]
	
-------------------------
10 str.toUpperCase()
11 str.toLowerCase()
	一般用来：作判断前,先转换
	比如，在IE低版本<p>标签是大写<P>
	这时就要先全部转换成大或小写


12 str.localCompare(str2)	按照当地规则来排序
	中文，按拼音来排序