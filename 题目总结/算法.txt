题目：
	1	有一个数n=5，不用for、while等循环，怎么返回[1,2,3,4,5]这样一个数组
	2	斐波那契数列 1.1.2.3.5.8.13.21
	3	数组去重
	4	已有树结构，通过id取到节点getNodeById
	5	构造树结构结构



--------------------题目1---------------------
题目：
	有一个数n=5，不用for、while等循环，怎么返回[1,2,3,4,5]这样一个数组

解答：
	


	


--------------------题目2---------------------
题目：
	斐波那契数列 1.1.2.3.5.8.13.21
	
解答：
	用循环：
		function f(num) {
		    var arr = [1, 1];
		    while (arr.length < num) {
		        arr.push(arr[arr.length - 1] + arr[arr.length - 2])
		    }
		    return arr;	//返回数列的前num项
		    //return arr.pop();	//返回数列中的第num个
		}
		console.log(f(10));	//[ 1, 1, 2, 3, 5, 8, 13, 21, 34, 55 ]
		//console.log(f(10));	//55

		function f(num) {
		    var a = 1;
		    var b = 1;
		    for (var i = 2; i < num; i++) {
		        [a, b] = [b, a + b];
		    }
		    return b;
		}
		console.log(f(10)); //55
	用递归：
		function f(num) {
		    if (num === 1 || num === 2) {
		        return 1;
		    } else {
		        return f(num - 1) + f(num - 2);
		    }
		}
		console.log(f(10)); //55



--------------------题目3---------------------
题目：
	数组去重

解答：
	方法1：arr向arr2里存，存前看有没有重复
		var arr = [1, 7, 5, 9, 5, 4, 7, 2, 1, 7];
		function quChong(arr) {
		    var arr2 = [arr[0]]; //[1]
		    for (var i = 1; i < arr.length; i++) {
		        arr2.push(arr[i]);
		        for (var j = 0; j < arr2.length - 1; j++) {
		            if (arr[i] === arr2[j]) {
		                arr2.length--;
		                break;
		            }
		        }
		    }
		    return arr2;
		}
		console.log(quChong(arr)); //[ 1, 7, 5, 9, 4, 2 ]

	方法2：json
		var arr = [5, 1, 8, 5, 9, 5, 4, 8, 2, 1, 8];

		function quChong(arr) {
		    var arr2 = [];
		    var json = {};
		    for (var i = 0; i < arr.length; i++) {
		        if (!json[arr[i]]) {
		            arr2.push(arr[i]);
		            json[arr[i]] = 1;
		        }
		    }
		    return arr2;
		}
		console.log(quChong(arr)); //[ 5, 1, 8, 9, 4, 2 ]

		方法3：
		var arr = [5, 1, 8, 5, 9, 5, 4, 8, 2, 1, 8];
		arr=[...new Set(arr)];	//[5, 1, 8, 9, 4, 2]
		//arr = Array.from(new Set(arr));






--------------------题目4---------------------
题目：
	节点结构：每个id唯一，没有子节点时，children为false
	node: {
	    id :"xx",
	    name:"xxx",
	    children :[node,node,...]
	}
	需求：给定id输出node信息，请完成方法getNodeById
	var data={
	    id :"xx",
	    name:"xxx",
	    children :[node,node,...]
	};
	var node=getNodeById(data,id);
	console.log(node);

解答：	
	function getNodeById(oParent, id) {
	    if (oParent.id === id)
	        return oParent;
	    if (oParent.children) {
	        var result = false;
	        var aParent = oParent.children;
	        for (var i = 0; i < aParent.length; i++) {
	            result = getNodeById(aParent[i], id);
	            if (result) {
	                console.log(aParent[i]);
	                return result;
	            }
	        }
	    }
	    return false;
	}
	var a = getNodeById(node1, 11);
	console.log('最终结果就是', a);




--------------------题目5---------------------
题目：
	var list = [
		{ id: "1", name: "a", pid: "0" },
	    { id: "2", name: "g", pid: "8" },
	    { id: "3", name: "h", pid: "2" },
	    { id: "4", name: "d", pid: "1" },
	    { id: "5", name: "j", pid: "6" },
	    { id: "6", name: "c", pid: "0" },
	    { id: "7", name: "k", pid: "6" },
	    { id: "8", name: "f", pid: "9" },
	    { id: "9", name: "b", pid: "0" },
	    { id: "10", name: "i", pid: "7" },
	    { id: "11", name: "e", pid: "1" }
	];
	需求：给出list，输出ztree结构的数据


解答：
	function getChildren(id){
		var childrenList=[];
		for(var i=0;i<list.length;i++){
			if(list[i].pid===id){
				list[i].children=getChildren(list[i].id);
				childrenList.push(list[i]);
			}
		}
		return childrenList;
	}

	var res=getChildren("0");
	console.log(res);

