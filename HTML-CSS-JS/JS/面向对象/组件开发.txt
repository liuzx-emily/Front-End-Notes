代码复用：
	1 面向对象
	2 继承
	3 组件开发: 多组对象，像兄弟之间的关系

--------------
	*默认参数和配置参数
var a = {name:'Phil',age:32};
var b = {name:'Cam',gender:'Male',age:20};
extend(b,a);
function extend(obj1,obj2){
	for(var attr in obj2){
		obj1[attr] = obj2[attr];
	}
}
最终b变为：{name: "Phil", gender: "Male", age: 32}
这里边的b就是"默认参数"，a就是"配置参数"


--------------
	*实例：拖拽-组件*
1 在构造函数中设置好"默认参数"：
  	this.settings = { //默认参数
  	    toDown: function() {},
  	    toMove: function() {},
  	    toUp: function() {},
  	};
2 在init()函数中进行参数处理
	extend(this.settings, opt);
3 实例化对象d在用init方法传"配置参数"
	var d2 = new Drag();
  	d2.init({
  	    id: 'div2',
  	    toMove: function(obj) {obj.style.backgroundColor = 'lightcyan';},
  	    toUp: function(obj) {obj.style.backgroundColor = 'lightcoral';}
  	});
具体见："拖拽-组件.html"


--------------
	*实例：弹窗-组件*
具体见："弹窗-组件.html"


--------------
	*自定义事件
1 自定义事件 : 让函数能够具备事件的某些特性
  用途：有利于多人协作开发代码
2 用法：
	//绑定自定义事件：
	//obj:楼层，event:书架，fn:一本书	
	function bindEvent(obj,event,fn){	
		obj.listeners = obj.listeners || {};
		obj.listeners[event] = obj.listeners[event] || [];		
		obj.listeners[event].push(fn);
	}

	//主动触发自定义事件：
	function fireEvent(obj, event) {
        var events = obj.listener[event];
        for (var i = 0; i < events.length; i++) {
            events[i].call(obj);	//修改this的指向
        }
    }
  使用举例：
	<body>
	    <span>haha啦啦啦</span>
	    <input type="button" value='点一下'>
	    <script>
	    var oSpan = document.getElementsByTagName('span')[0];
	    var oInput = document.getElementsByTagName('input')[0];

	    function fn1() {
	        this.style.color = 'red';
	    }

	    function fn2() {
	        document.title = 'haha';
	    }
	    bindEvent(oSpan, 'liuzx', fn1);
	    bindEvent(oSpan, 'liuzx', fn2);
	    oInput.onclick = function() {
	        fireEvent(oSpan, 'liuzx');
	    };
	    </script>
	</body>



--------------
	基于JQ的选项卡的组件开发模式
模仿jQueryUI
将配置参数、方法、事件，三者进行分离
1 参数：
	this.settings = {
	    event: 'click',
	    startIndex: 0,
	    delay: 0
	};
2 方法：
	getContent
3 事件
	$(t4).on('beforeClick', t4.getContent); //自定义事件
	$(This).trigger('beforeClick');	//触发
	都必须用$()括起来:$(t4) $(This)
注意事项：
	1 $.extend方法：
		$.extend(b,a) 拷贝赋值
	2 自定义事件用on
	3 触发事件用trigger