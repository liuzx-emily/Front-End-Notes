-----------------------
	*border*
1 border-width
	1 不支持%
		原因：边框的宽度不应该随屏幕大小变化而变化，所以用%不合语义
	2 支持关键字
		thin 1px
		medium 3px (默认)
		thick 5px
2 border-style
	1 solid
	2 dashed 虚线 (IE下比chrome ff更密一点)
		因为不统一，只能乖乖做边框，不能用来画图
	3 dotted 点线 (IE圆点;chrome ff方块)
	4 double 双线
3 border-color
	没有指明时，使用color的值
	例：图形变色
		<a class="btn_add" href="javascript:void(0)"></a>		
		.btn_add{
		    display: inline-block;
		    width: 40px;
		    height: 40px;
		    border:2px solid;
		    color:#ccc;
		    position: relative;
		}
		.btn_add:before{
		    content:"";
		    display: inline-block;
		    position: absolute;
		    left: 4px;
		    top: 18px;
		    width: 0;
		    height: 4px;
		    border-right: 30px solid;
		    color: inherit;
		    z-index: 1;
		}
		.btn_add:after{
		    content:"";
		    display: inline-block;
		    position: absolute;
		    left: 18px;
		    top: 4px;
		    width:4px;
		    height: 0;
		    border-bottom: 30px solid;
		    color: inherit;
		    z-index: 1;
		}
		.btn_add:hover{
		    color:#097;
		}

4 border设置为transparent来增加点击区域

--------------------
	*BFC和IFC*
先占个位置
https://yuiblog.com/blog/2010/05/19/css-101-block-formatting-contexts/

--------------------
	*文本流和文档流*
文档流：Normal Flow,翻译作'正常流'、'常规流'比较好。
脱离文档流：将元素从普通的布局排版中拿走,其他盒子在定位的时候,会当做它不存在。
与位置有关的css属性：
	position: static relative absolute fixed
	float: none left right
	其中,position:static relative和float:none均属于normal flow.
	而,  position:absolute fixed和float:left right都脱离了normal flow
脱离文档流normal flow之后, 元素不再有原先的inline、block的限制,反而比较像inline-block。可以设置w h p b m,不设置w h时,由内容撑开。

文档流是相对于盒子模型讲的,文本流是相对于文字讲的。
float之后,元素会脱离文档流,但是不脱离文本流。所以会有‘文字环绕图片’效果。
absolute(fixed)后,元素不仅会脱离文档流,也会脱离文本流。

--------------------
	*设置float之后的display属性*
在chrome下测试过了：
	任何元素，无论是block、inline-block、inline、替换元素、非替换元素，只要设置了float，那么display属性一律变为block。
比如：
	.box{
		float:left;
		display:inline-block;
	}
那么.box最终的display属性是block

--------------------
	*定位*
position:relative | absolute | fixed | static | inherit;
position:relative;  相对定位
	a、不影响元素本身的block inline inline-block等特性；
	b、元素在文档流中；
	c、如果没有定位偏移量,对元素本身没有任何影响；
position:absolute;  绝对定位
	a、元素不再有原先的inline、block的限制,反而比较像inline-block。
	b、完全脱离文档流normal flow和文本流；
	c、如果有定位父级相对于定位父级发生偏移,没有定位父级相对于整个文档发生偏移；
	d、相对定位一般都是配合绝对定位元素使用；
position:fixed;	固定定位
	与绝对定位的特性基本一致,差别是始终相对整个文档进行定位；
	问题：IE6不支持固定定位；
z-index:[number]；  定位层级
	定位元素默认后者层级高于前者；

定位的兼容问题、清浮动方法（IE6的问题就略了）
	position:absolute; 绝对定位元素子级的浮动可以不用写清浮动方法(不会用它清浮动,只是省代码)
	position:fixed;固定定位元素子级的浮动可以不用写清浮动方法(不会用它清浮动,只是省代码)

--------------------
	*scss第一行*
@charset "utf-8";

--------------------
	*一些文字设置*
text-overflow：文本溢出包含它的元素时
	clip	修剪文本。
	ellipsis	显示省略符号来代表被修剪的文本。
	string	使用给定的字符串来代表被修剪的文本。


--------------------
	*关于换行*

white-space:指定元素内的空白怎样处理。
	normal	忽略空白
	pre	保留空白，如同<pre>的行为
	nowrap	忽略空白，文本不会换行，直到遇到<br/>
	pre-wrap	保留空白,但是正常地进行换行。
	pre-line	合并空白,但是会正常地进行换行

word-break:指定非CJK脚本的断行规则。(CJK:"中日韩"脚本)
	normal	使用浏览器默认
	break-all	在任意单词内换行。
	keep-all	不允许在任意单词内换行,只能在半角空格或连字符处换行。

word-wrap:
	normal	浏览器默认只在允许的断字点换行
	break-word	在长单词或URL地址内部进行换行。

粗暴的换行：word-break:break-all;word-wrap:break-word; 
温柔的换行：word-wrap:break-word;
	若需要换行处恰好是复合词，就在原连字符号处分行；其它情况则整个单词移到下一行。
打死不换行：word-break:keep-all;white-space:nowrap;（一般不用这个）


--------------------
	*伪类*
伪类：伪类用于向被选中元素添加特殊的效果。
	link     	未访问(默认)
	hover   	鼠标悬停(鼠标划过)
	active   	链接激活(鼠标按下)
	visited  	访问过后(点击过后)
A四个伪类的顺序：
	link    visited    hover  active
	(love hate)


--------------------
	
常见样式 —文本设置
	font-size		文字大小
	font-family 	字体(中文默认宋体)
	color        	文字颜色(英文、rgb、十六位进制色彩值)
	line-height   	行高
	text-align    	文本对齐方式
	text-indent  	首行缩进(em缩进字符)
	font-weight  	文字着重
	font-style   	文字倾斜
	text-decoration	文本修饰
	letter-spacing	字母间距
	word-spacing	单词间距(以空格为解析单位)

font：font-style|font-weight|font-size/line-height|font-family；


--------------------
	*vertical-align*
垂直对齐方式
a、同排all元素都要加
b、垂直对齐方式可以解决图片下方间隙问题


--------------------
	*图片下方间隙问题*
a、display:block; (改变标签本身特性)
b、overflow:hidden; (必须知道图片高度)
c、vertical-align (暂时最完美的方案)
	vertical-align:top

--------------------
	*遮罩滤镜*
IE8-：	filter:alpha(opacity=0~100); 
标准：	opacity:0~1; 


--------------------
	*背景*
1 背景颜色
  background-color:red;
	1 #FF0000
	2 rgb(255,0,0)
	3 red
2 背景图片
  background-image:url('paper.gif');
	默认情况下，背景图像进行平铺重复显示，以覆盖整个元素

  background-repeat:repeat|repeat-x|repeat-y|no-repeat;

  background-attachment:设置背景图像是否固定或者随着页面的其余部分滚动
  	scroll（默认值）/fixed

  background-position：设置背景图像的起始位置。
  	1 关键字：
  		left|center|right  top|center|bottom  如果仅指定一个关键字，另一个将会是"center"
  	2 百分比：
  		左上角是0% 0%，右下角是100% 100%  如果仅指定了一个值，另一个值将是50%
  	3 xpos ypos：
  		单位可以是任何css单位  可以混合使用%和pos
注意：
  background-repeat:repeat-x;
  background-position:10px 0px;
  左边的10px宽度不会空着。
