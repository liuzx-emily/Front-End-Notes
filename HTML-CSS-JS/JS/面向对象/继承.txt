--------------
	*继承*
1 继承: 子类继承父类的功能 ,子类添加新功能不影响父类
2 继承的几种方法：
	1 拷贝继承：for in循环
	2 ????继承 不管叫什么名字了




--------------
	*拷贝继承*
1 属性的继承: 调用父类的构造函数 call修改this指向
2 方法的继承: for in拷贝继承(jquery也是采用拷贝继承extend)

	//父类：
	function CreatePerson(name){
		this.name = name;
	}
	CreatePerson.prototype.showName = function(){alert(this.name);};
	//子类：
  	function CreateStar(name,job){ 		
  		CreatePerson.call(this,name);		
  		this.job = job;
  	}
  	extend(CreateStar.prototype,CreatePerson.prototype);
  	CreateStar.prototype.showJob = function(){alert(this.job);};
  	function extend(obj1,obj2){
  		for(var attr in obj2){
  			obj1[attr] = obj2[attr];
  		}
  	}

解释：
1 CreatePerson.call(this,name);
	使用call方法修改this指向。如果直接调用CreatePerson();那么父类中的this其实是window，结果是window.name=name
2 extend函数中使用for in循环
	for in循环不到CreatePerson.prototype中的constructor，因为constructor属性是系统自动生成的。所以CreateStar.prototype中的constructor属性不会被for in循环修改，还是指向原来的CreateStar.
3 方法继承不能直接用等号"="赋值：
	CreateStar.prototype=CreatePerson.prototype;不行
	这样两个prototype指向一个地址。之后给子类原型CreateStar.prototype添改属性/方法，也会影响父类CreateStar.prototype。


--------------
	*？？继承*
	//父类：
	function Aaa(){this.num = [1, 2];}
	Aaa.prototype.showNum=function(){alert(this.num);};
	//子类：
	function Bbb(){}
【题目】怎样一句话实现继承？
  答：Bbb.prototype=new Aaa();
  分析：这样有很大的问题：
	将new Aaa()记为a1。原型链:Bbb.prototype=a1————Aaa.prototype————Object.prototype。a1有属性a1.num=[1, 2]。Aaa.prototype对象有showNum方法和constructor属性。
	问题1：Bbb.prototype.constructor指向Aaa
		因为Bbb.prototype.constructor也就是a1.constructor，a1下没有属性constructor，沿着原型链向上找，在Aaa.prototype下找到constructor属性，值是Aaa
		证明这一点，可以改：Aaa.prototype.constructor = liuzx;那么new Bbb().constructor==liuzx是true
	问题2：b1和b2之间会相互影响
		var b1 = new Bbb();
		var b2 = new Bbb();
		b1.num.push(3);
		alert(b2.num);	//1,2,3
		b1.num=[33,55]; //是重新赋值，b1.num和b2.num不再指向一个地址，不会互相影响
		alert(b2.num);	//1,2,3

1 公用的方法、独有的属性要分开继承

  //继承属性：
	function Bbb(){
		Aaa.call(this); 
	}
  //继承方法：
	var F = function(){};
	F.prototype = Aaa.prototype;
	Bbb.prototype = new F();
  //修正constructor指向：
  	Bbb.prototype.constructor=Bbb;
