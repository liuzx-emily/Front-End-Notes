题目：
1 a b两个变量，不用第三个变量来切换两个变量值

2 有一个数n=5，不用for、while等循环，怎么返回[1,2,3,4,5]这样一个数组

3 一个数n，当n小于100就返回n，否则就返回100

4 用Math.max找出arr=[1,2,3]的最大值：
	Math.max.apply(null,arr)

5 将2维数组转化成1维：
	var arr=[1,2,3,[5,6],[1,4,8]];
	var arr2=a.join(",").split(",");

6   var arr1=[1,2,3];
	var arr2=[4,5,6];
	arr1+arr2结果是什么？

7 成长速度为5显示1个箭头；成长速度为10显示2个箭头；成长速度为12显示3个箭头；其他都显示都显示0个箭头。
-----------------
	解答1
只能用于数字：
	var a = 2;
	var b = 7;
	a = a * b;	//用加减乘都可以
	b = a / b;
	a = a / b;

变量的类型不限：
	var a='string';
	var b={name:'emily'};
  方法一：
	a=[a,b];
	b=a[0];
	a=a[1];
  方法2：
	[a,b]=[b,a];	


-----------------
	解答2
1 用递归
2 向array头部添加：unshift
3 为了不增添额外的全局变量，用1：匿名函数递归 2：给函数表达式起名字
方法一：匿名函数递归【已过时】
	callee是arguments对象的属性。它可以用于引用该函数的函数体内当前正在执行的函数。
	function f(num) {
	    var arr = [];
	    (function() {
	        arr.unshift(num);
	        num--;
	        if (num !== 0) {
	            arguments.callee();
	        }
	    })();
	    return arr;
	}
	console.log(f(7));
现在已经不推荐使用arguments.callee();
原因：访问 arguments 是个很昂贵的操作，因为它是个很大的对象，每次递归调用时都需要重新创建。影响现代浏览器的性能，还会影响闭包。

方法二：命名函数表达式
	function f(num) {
	    var arr = [];
	    console.log(typeof lzx); //undefined
	    (function lzx() {
	        arr.unshift(num);
	        num--;
	        if (num !== 0) {
	            lzx();
	        }
	    })();
	    return arr;
	}
	console.log(f(7));	//[ 1, 2, 3, 4, 5, 6, 7 ]
 注：可以看到typeof lzx是undefined：证明了命名函数表达式只在这个新函数的内部有效。
 命名函数表达式的作用：
 	1. 递归
 	2. debug时方便看


-----------------
	解答3
1 用判断：if   ?:   switch
2 Math.min(n,100)
3 [n,100].sort(function(a,b){return a-b})[0]
4 (n>100 && 100) || n

-----------------
	解答4
用Math.max找出arr=[1,2,3]的最大值：
	Math.max.apply(null,arr)

-----------------
	解答5
将2维数组转化成1维：
	var arr=[1,2,3,[5,6],[1,4,8]];
	var arr2=a.join(",").split(",");


-----------------
	解答6   
var arr1=[1,2,3];
var arr2=[4,5,6];
arr1+arr2 	//"1,2,34,5,6" 是个string

-----------------
	解答7
菜鸟：if switch
高手1：
	var add_level = (add_step==5 && 1) || (add_step==10 && 2) || (add_step==12 && 3)  || 0;
高手2：
	var add_level={'5':1,'10':2,'12':3}[add_step] || 0;	
