trim
repeat
模版字符串：
	${变量名}
	

-----------------------包装对象-----------------------

基本类型都有自己对应的包装对象:String Number Boolean
(值类型的另外两种:null undefined没有包装对象)

	var str1 = 'hello';
	var str2 = new String('hello');	//不推荐这么写
	alert(typeof str1);	//string
	alert(typeof str2);	//object

基本类型不是对象，那么为什么和对象一样有属性和方法呢？
	var str='Phil';
	str.length		//4
	str.charAt(0)	//P

基本类型调用属性、方法时：基本类型会找到对应的包装对象类型(String Boolean Number)，然后包装对象把所有的属性和方法给了基本类型，然后包装对象消失
	String.prototype.liuzx=function(){
		alert('所有string类型和String对象都可以调用这个');
	}
	var s1 = 'phil';
	var s2 = new String('aaa');
	s1.liuzx();	
	s2.liuzx();

	var str='Dunphy';
	str.abc=123;
	alert(str.abc);	//undefined

	var str='Phil';
	console.log(typeof str);	 	//string
	console.log(str.constructor); 	//function String(){}
	console.log(str instanceof String); //false




--------------- 字符串内断行 \ --------------
使用反斜杠\
	var x = "Hello \
		World!";




--------------------题：把str颠倒--------------------

	var str = 'abcdef';
	var newStr = str.split('').reverse().join('');
	console.log(str);		//abcdef
	console.log(newStr);	//fedcba





-------------------题：str中连着查找-------------------
效果要求：
	find('小蜗牛小狗小猫大鸭梨', '小'); 
	结果[ 0, 3, 5 ]

	function find(str, re) {
	   re = new RegExp(re, 'g');
	   var arr = [];
	   str.replace(re, function(match, offset, string) {
	      arr.push(offset);
	   });
	   return(arr);
	}




-------------------题：简单加密-------------------

	function jiaMi(text) {
	   var newText = '';
	   for (let i = 0; i < text.length; i++) {
	      newText += String.fromCharCode(text.charCodeAt(i) * 2);

	   }
	   return newText;
	}

	function jieMi(text) {
	   var originalText = '';
	   for (let i = 0; i < text.length; i++) {
	      originalText += String.fromCharCode(text.charCodeAt(i) / 2);

	   }
	   return originalText;
	}





-------------------str.charCodeAt-------------------
	charCodeAt(index)
	返回：0~65535之间的一个整数，使用UTF-16编码
	'ABC'.charCodeAt(0); 	// 65
常见编码:
	0~9  	48~57			
	a~z		97~122			
	A~Z   	65~90




-------------fromCharCode-------------
	String.fromCharCode(num1,num2,...)

	String.fromCharCode(65, 66, 67);	// "ABC"
	



---------------indexOf---------------

	indexOf(searchValue, fromIndex)
	可选fromIndex
	返回-1说明没找到。
例子：
	var str='Blue Whale';
	str.indexOf('Blue');     	// returns  0
	str.indexOf('aaaa');    	// returns -1
	str.indexOf('Whale', 0); 	// returns  5
	str.indexOf('Whale', 5); 	// returns  5
	str.indexOf('Whale', 100);  // returns -1

str.search()支持正则查找
	var str='abc?def';	
	str.indexOf('?')	//把?当作字符，查找?。结果：3
	str.search('?')		//把?当作正则表达式，会报错，因为?不是合法的正则表达式.结果：报错
所以，查找字符时用indexOf；用正则式用search




-------------------lastIndexOf-------------------
	lastIndexOf(searchValue, fromIndex)
	可选fromIndex:从哪里开始向左找
	返回-1说明没找到。

例子；
	var str='canal';
	str.lastIndexOf('a');     	// returns 3
	str.lastIndexOf('a', 2);  	// returns 1
	str.lastIndexOf('a', 0);  	// returns -1
	str.lastIndexOf('x');     	// returns -1
	str.lastIndexOf('c', -5); 	// returns 0
	str.lastIndexOf('c', 0);  	// returns 0




-------------------substring-------------------
	str.substring(indexStart[, indexEnd])

例子1：
	var str = 'Mozilla';	
	str.substring(0, 3)		//'Moz'
	str.substring(4)		//'lla'




-------------------substr：可以传负数-------------------
	str.substr(start , length)
	start可以是负数

例子：
	var str = 'abcdefghij';
	str.substr(1, 2)   	// 'bc'
	str.substr(-3, 2) 	// 'hi'
	str.substr(-3)		// 'hij'
	str.substr(1) 		// 'bcdefghij'
	str.substr(-20, 2) 	// 'ab'
	str.substr(20, 2) 	// ''




-------------------slice-------------------
	str.slice(beginIndex[, endIndex])
   	返回一个新string，不影响原来的string

例子1：
	str1 = 'The morning is upon us.'	//长度23
    str1.slice(1, 8)  	//he morn
    str1.slice(4, -2) 	//morning is upon u
    str1.slice(12)		//is upon us.
    str1.slice(30)		//""

例子2：
	str = 'The morning is upon us.';
	str.slice(-3);     	//'us.'
	str.slice(-3, -1); 	//'us'
	str.slice(0, -1);  	//'The morning is upon us'




-------------------split-------------------
	str.split([separator[, limit]])
	separator可以是正则

	var str = 'www.miaov.com';
	str.split('.');	// ['www','miaov','com']

	var str1 = 'leo';
	str1.split() ;		// ['leo']
	str1.split('');		//['l','e','o']


	var str3 = '/www.miaov.com/';
	str3.split('/');	// [ , www.miaov.com,  ]

	var str4 = '2013-11-29-23-07'; 
	str4.split('-', 3);	// [ '2013', '11', '29' ]
	


------------------- -------------------
10 str.toUpperCase()
11 str.toLowerCase()
	一般用来：作判断前,先转换
	比如，在IE低版本<p>标签是大写<P>
	这时就要先全部转换成大或小写




-------------------localCompare-------------------
	str.localCompare(str2)
	按照当地规则来排序：中文按拼音来排序