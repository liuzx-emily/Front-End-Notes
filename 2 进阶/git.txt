工作区 => add => 暂存区 => commit => 版本库 => 远程仓库


git是版本控制工具。github是远程仓库。


常用：
	初始化，下载到本地，并重命名：
		git clone xxx.git "重命名"
	从远程仓库更新：
		git pull origin master


	

svn：集成式
	集中在中央服务器
	要修改、查看都必须有网络，连接到中央服务器
	中央服务器一旦丢失数据，就完蛋了
git：分布式
	本地就有版本库，可以离线随时修改、查看
	每个参与的电脑上都有一份数据，不怕丢
	想要和别人共享自己修改后的东西，必须自己去和别人的电脑连接（麻烦，所以有了github）	

建立一个库
	drag
	git  clone  [url]
	设置、查看贡献者
		git config --global  user.name
		git config --global user.email
		git config --list 查看所有配置项

git的三个区
	工作区 working directory
	暂存区
		作为过渡层
		避免误操作
		保护工作区和版本区
		分支处理
	版本区（也叫做“版本库”）


svn中没有暂存区，从工作区直接提交代码到中央服务器（版本库）
而git中，代码不能从工作区直接提交到版本库

----------------
	*Git命令*
1 git status
2 git add 工作区->暂存区
	name
	.
3 git commit 暂存区->版本库，提交所有
	-m 后面直接写注释
	-a 直接 工作区-> 暂存区->版本库
		git commit -a -m "这里是注释"

4 git log 查看版本状态
	(commit多时一次显示不全，按enter显示更多，按q退出)

5 对比：新增的用绿色，删除的用红色
	git diff 工作区&暂存区
	git diff --cached(--staged) 暂存区&版本库
	git diff master 工作区&版本库（master是分支名字）

6 撤销之前的操作
	git reset HEAD <file.name> 把从工作区提交到暂存区中的修改，撤销掉（改暂存区中的）
	git checkout -- <file.name> 把工作区的文件还原回“暂存区”中的版本（如果暂存区中没有，就还原回版本库）
	git commit --amend 撤销&合并提交
	 例：有两个文件想要commit，但输错了只提交了一个。为了不形成两次提交：
	 	git add 1.txt
	 	git commit -m "1files"
	 	git add 2.txt
		git commit -m "2files" --amend
	 这样在log中就只是一次commit两个文件，注释为“2files”

7 删除
	git rm <file.name> 删暂存区（只有“工作区没有该文件，暂存区有该文件时”，才能删掉暂存区的）
	git rm -f <file.name> 删工作区和暂存区
	git rm --cached <file.name> 只删暂存区，保留工作区

8 恢复（从版本库中恢复到工作区，由commit_id来选择版本）
	git checkout commit_id <file.name> 恢复对应版本的一个指定文件
	git reset --hard commit_id 恢复对应版本（所有文件）
		HEAD^ 回到过去的版本
		HEAD~<num>
	git reflog 查看操作，能得到commit_id，再利用git reset --hard commit_id回到较新版本

  HEAD是一个指针，指向当前版本。HEAD向上是之后的版本，HEAD向前是以前的版本。
	git reset --hard HEAD^ ：HEAD向以前走1个版本
	git reset --hard HEAD^3 ：HEAD向以前走3个版本

----------------
	*同步到远程仓库(github)*
1 git remote 查看远程仓库名字 默认的名字是origin，可以改
	-v 查看名字和地址	
2 git push origin 分支名 提交到远程仓库

----------------
	*多人协作开发*
1 添加合作人员：给修改权限（所有人都能读，但只有collaborator能写）
2 多人协作解决冲突
	git fetch 从版本库获得最新，不合并
		Git diff master origin/master 查看区别
		Git merge  orgin/master 合并
		然后打开文件手动修改
		修改完后提交
	git pull 从版本库获得最新而且自动合并（不容易查看区别 不推荐）

----------------
	*开源项目开发*
1 fork：
	先fork到自己的github下
	大改动，可以下载到本地后，修改完提交
	小修改时可以直接在浏览器中，自己fork的github文件中edit
2 修改好后pull request

----------------
	*Git分支*
不同branch下的文件互不影响，需要合并时merge
1 git branch
  查看：git branch，当前分支前有*
  创建：git branch 分支名，不会切换到新建分支
  删除分支：-d 分支名，没有和master合并的分支不允许删除
  强制删除分支：-D 分支名，将没有和master合并的分支强制删除
  查看已经与master合并的分支：--merged(在master下用)
  查看还没与master合并的分支：--no-merged(在master下用)

2 git checkout
  切换：git checkout 分支名 
  创建+切换：-b 分支名

3 git merge

【延伸阅读】Git分支管理策略：http://www.ruanyifeng.com/blog/2012/07/git.html


----------------
	*github上的分支*
上面只是在git上操作分支，不会自动同步到github
1 cmd中：git push origin 分支名
2 在github上直接创建分支


----------------
	*github上的标签*
例：cmd中
	git tag lzx_v1.0
	git push origin lzx_v1.0
或者直接在github中创建：
	点release -> 点draft a new release


----------------
	*延伸阅读*
http://git.oschina.net/progit/
http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000

